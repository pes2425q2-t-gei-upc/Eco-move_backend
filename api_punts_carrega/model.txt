class Usuario(AbstractUser):
    idioma = models.CharField(max_length=20, choices=Idiomas.choices, default=Idiomas.CATALA)
    telefon = models.CharField(max_length=15, blank=True, null=True)
    foto = models.ImageField(upload_to='fotos/',storage=MediaCloudinaryStorage(), blank=True, null=True)
    descripcio = models.TextField(blank=True, null=True)
    _punts = models.IntegerField(default=0, db_column='punts')  # _ és per fer privat a python
    # Forzamos que el email sea único y lo usamos para login
    email = models.EmailField(unique=True)
    bloqueado = models.BooleanField(default=False)
    
    #valorar si permitir iniciar sesion con email y/o username, mas trabajo
    USERNAME_FIELD = 'email'
    REQUIRED_FIELDS = ['username']
    
    is_admin = models.BooleanField(default=False)  # Campo para distinguir administradores

    def __str__(self):
        return f"{self.first_name} {self.last_name} ({self.email})"
    
    def save(self, *args, **kwargs):
        # Eliminar imagen anterior si se está cambiando
        try:
            old = Usuario.objects.get(pk=self.pk)
            if old.foto and self.foto != old.foto:
                old.foto.delete(save=False)
        except Usuario.DoesNotExist:
            pass  # es un nuevo usuario

        super().save(*args, **kwargs)

    @property
    def punts(self):
        return self._punts
    
    @transaction.atomic
    def sumar_punts(self, cantidad):
        
        if not isinstance(cantidad, int) or cantidad <= 0:
            raise ValueError("La cantidad de puntos debe ser un entero positivo")
        
        # Refrescar el usuario desde la base de datos para evitar condiciones de carrera
        usuario_actual = Usuario.objects.select_for_update().get(pk=self.pk)
        puntos_anteriores = usuario_actual._punts
        usuario_actual._punts += cantidad
        usuario_actual.save(update_fields=['_punts'])
        
        # Verificar si el usuario ha alcanzado nuevos trofeos
        self._verificar_trofeos(puntos_anteriores, usuario_actual._punts)
        
        # Actualizar el objeto actual
        self.refresh_from_db(fields=['_punts'])
        return self._punts
    
    def _verificar_trofeos(self, puntos_anteriores, puntos_actuales):
        """Verifica si el usuario ha alcanzado los puntos necesarios para nuevos trofeos"""
        # Obtener todos los trofeos que el usuario podría haber desbloqueado
        trofeos_posibles = Trofeo.objects.filter(
            puntos_necesarios__gt=puntos_anteriores,
            puntos_necesarios__lte=puntos_actuales
        )
        
        # Otorgar los trofeos al usuario
        for trofeo in trofeos_posibles:
            UsuarioTrofeo.objects.get_or_create(usuario=self, trofeo=trofeo)
    
    @transaction.atomic
    def restar_punts(self, cantidad):
        if not isinstance(cantidad, int) or cantidad <= 0:
            raise ValueError("La cantidad de puntos debe ser un entero positivo")
        
        # Refrescar el usuario desde la base de datos para evitar condiciones de carrera
        usuario_actual = Usuario.objects.select_for_update().get(pk=self.pk)
        
        if usuario_actual._punts < cantidad:
            raise ValueError(f"El usuario solo tiene {usuario_actual._punts} puntos, no se pueden restar {cantidad}")
        
        usuario_actual._punts -= cantidad
        usuario_actual.save(update_fields=['_punts'])
        
        # Actualizar el objeto actual
        self.refresh_from_db(fields=['_punts'])
        return self._punts



class UsuarioTrofeo(models.Model):
    usuario = models.ForeignKey(Usuario, on_delete=models.CASCADE)
    trofeo = models.ForeignKey(Trofeo, on_delete=models.CASCADE)
    fecha_obtencion = models.DateTimeField(auto_now_add=True)


class Trofeo(models.Model):
    id_trofeo = models.IntegerField(primary_key=True)
    nombre = models.CharField(max_length=100)
    descripcion = models.TextField()
    puntos_necesarios = models.IntegerField(unique=True)
    
    def __str__(self):
        return self.nombre
    
    class Meta:
        ordering = ['puntos_necesarios']



